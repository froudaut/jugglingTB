%%

    input: SS_class SS_ext 
{
    #my @res = @main::SWP;  
    #@main::SWP = ();
    #$main::idxSwp=0;
    #$main::SSsize=$_[1] + $_[1]*$_[2];
    #print $main::SSsize;
    return 0;
}
| SS_sync SS_ext
{
    #my @res = @main::SWP;  
    #@main::SWP = ();
    #$main::idxSwp=0;
    #$main::SSsize=$_[1] +$_[1]*$_[2];
    #print $main::SSsize;
    return 0;
}
| lexerror
{
    #$main::SSsize=0;
    return -1;
};

## Siteswap in Vanilla and Multiplex combination
    SS_class : #empty
{
    #0;
}
## Vanilla Siteswap
    | digit SS_class 
{
    #int($_[1])+$_[2];
}
## Multiplex Siteswap	      
    | '[' SS_async ']' SS_class 
{
    #$_[2]+$_[4];
};

## Vanilla Siteswap
    SS_async : digit SS_async
{
    #int($_[1])+$_[2];
}
| digit	     
{
    #int($_[1]);
};
	      
## Multiplex Siteswap 	      
    ##SS_mult : '[' SS_async ']' SS_mult 
	##{}
##| '[' SS_async ']' 	      
    ##{};
	      
## Synchronous Siteswap 
    SS_sync   : '(' SS_simpl ',' SS_simpl ')' SS_sync 
{
    #$_[2]+$_[4]+$_[6];
}
| '(' SS_simpl ',' SS_simpl ')'
{
    #$_[2]+$_[4];
};	     	      

SS_simpl  : value 
{
    #$_[1];
}
| SS_mult_with_x 	      
{
    #$_[1];
};	      
	
SS_async_with_x : value SS_async_with_x 
{
    #$_[1] + $_[2];
}
| value 
{
    #$_[1];
};	      

SS_mult_with_x : '[' SS_async_with_x ']' SS_mult_with_x 
{
    #$_[2] + $_[4];
}
| '[' SS_async_with_x ']'	      	    
{
    #$_[2];
};	      	      

## Siteswap Extented
    SS_ext : #empty
{
    #0;
} 
| '*'
{
    #1;
};	      
 
value : digit
{
    #int($_[1]);
} 
| digit 'x'
{
    #int($_[1]);
}
| digit 'X'
{
    #int($_[1]);
};
	      

%%

my $Input = "";
my $In="";

sub parse 
{
    $Input="$_[0]";        
    $In="$_[0]";
        my $p = new SITESWAP_GRAMMAR();        
    my $res = $p->YYParse( yylex => \&yylex, yyerror => \&yyerror);
    if($res==-1) {
	return $res;
    }
    return $p->YYNberr();
}

sub yyerror {
    my $e=join(", ",$_[0]->YYExpect);
    if($e ne "") {
    	  printf STDERR ('Error: a "%s" was found in <"%s"> where "%s" was expected'."\n", $_[0]->YYCurtok, $In, $_[0]->YYExpect);
	}
    else		
	{		
	    printf STDERR ('Error: a "%s" was found in "%s"'."\n", $_[0]->YYCurtok, $In);	
	}    	
}


sub init_lexical_file{
    my $file = shift;
    local $/;
    undef $/;
    if ($file) {
	open F, $file or die "$!";
	$Input = <F>;
	close F;
    } else {
	$Input = <>
	    }
}

sub yylex{
    for($Input){
	# Advance spaces
	    1 while (s!^(\s+|\n)!!g);
	# EOF
	    return ("","") if $_ eq "";
	# Tokens
	    s!^([A-Fa-f0-9])!! and return ("digit", $1);
	s!^([\[\](),*xX])!! and return ($1, $1);
	print STDERR "Unexpected symbols: $Input\n" and return ("lexerror",$1);;	
    }
}
