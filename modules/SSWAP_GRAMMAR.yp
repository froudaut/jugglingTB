%%
    input : 
	SS
{
    # Return is : 
     # Async : 1
     # Multiplex : 2
     # Sync : 3
     # Multiplex Sync : 4
     # MultiSync : 5
     # Error : -1

    return $_[1];
}
| SS_extend SS 
{
      if($_[1] eq '!') 
        {
	    return -1;
	}
      elsif($_[1] eq '*' && ($_[2] == 3 || $_[2] == 4))
	{
	     return $_[2];	 		
	}	
    else
	{	
	    return 5;	
	}

}
| lexerror
{
    return -1;
};


SS : 
    SS_unitary 
{
    $_[1];
}
| SS_unitary SS_extend 
{ 
    if($_[2] eq '*' && ($_[1] == 3 || $_[1] == 4))
	{
	     $_[1];	 		
	}	
    else
	{	
	    5;	
	}

}
| SS_unitary SS
{	
    if($_[1] == $_[2])
	{
	    $_[1];
	}
    elsif(($_[1] == 1 && $_[2] == 2) || ($_[1] == 2 && $_[2] == 1))
	{
	    2;
	}
    elsif(($_[1] == 3 && $_[2] == 4) || ($_[1] == 4 && $_[2] == 3))
	{
	    4;
	}	
    else
	{
	    5;
	}	
}
| SS_unitary SS_extend SS
{
    5;	
};


### Miika Toukola Extension
    SS_extend :
    '*'
{
    '*';
}
| '*' SS_extend
{
    5;
}
| '!'
{
    5;	
}
| '!' SS_extend
{
    5;
};


SS_unitary : 
    SS_async
{
    $_[1];	
}
| SS_sync
{
    $_[1];
};


SS_async :
    value 
{
    1;	
} 
## Multiplex Siteswap	      
    | '[' SS_vanilla ']'   
{
    2;
};

## Vanilla Siteswap
SS_vanilla : 
    value 
{
}
    | value SS_vanilla     
{
};


SS_multisync_in_sync :
 SS_async
{
   $_[1];	  
}
| SS_async SS_extend
{
   5;	  
}
| SS_async SS_multisync_in_sync 
{
   5;
}
| SS_async SS_extend SS_multisync_in_sync
{
   5;
};

 
## Synchronous Siteswap 
    SS_sync : 
    '(' SS_multisync_in_sync ',' SS_multisync_in_sync ')'  
{
    if($_[2] == 2 || $_[4] == 2)
    {
	4;
    } 
    elsif($_[2] == 5 || $_[4] == 5)
    {
	5;
    } 
    else
    {
	3;
    }     
};	     	      


value : 
    digit
{
}
| digit 'x'
{
}
| digit 'X'
{
};

%%

my $Input = "";
my $In="";
my $verbose = "0";

sub parse 
{
    $Input="$_[0]";        
    $In="$_[0]";
    if (scalar @_ > 1 && $_[1] eq '-1')
    {
	$verbose = "$_[1]";
    }
    else
    {
	$verbose = "0";
    }
    my $p = new SSWAP_GRAMMAR();        
    my $res = $p->YYParse( yylex => \&yylex, yyerror => \&yyerror);
    if($res==-1) {
	return $res;
    }
    elsif($p->YYNberr() != 0) {
	return -1;
    }
    else {
	return $res;
    }	
}

sub yyerror {
    my $e=join(", ",$_[0]->YYExpect);
    if($e ne "") {
    	if($verbose ne "-1") {
		printf STDERR ('Error: a "%s" was found in <"%s"> where "%s" was expected'."\n", $_[0]->YYCurtok, $In, $_[0]->YYExpect);
	}
    }
    else		
	{
	 if($verbose ne "-1") {
	    printf STDERR ('Error: a "%s" was found in "%s"'."\n", $_[0]->YYCurtok, $In);	    
	 }
    	}
}


sub init_lexical_file{
    my $file = shift;
    local $/;
    undef $/;
    if ($file) {
	open F, $file or die "$!";
	$Input = <F>;
	close F;
    } else {
	$Input = <>
	    }
}

sub yylex{
    for($Input){
	# Advance spaces
	    1 while (s!^(\s+|\n)!!g);
	# EOF
	    return ("","") if $_ eq "";
	# Tokens
	    s!^([A-Fa-f0-9])!! and return ("digit", $1);
	s!^([\[\](),*\!xX])!! and return ($1, $1);
    	if($verbose ne "-1") {
		print STDERR "Unexpected symbols: $Input\n" and return ("lexerror",$1);
	}
	else
	{
		return ("lexerror",$1);
	}
    }
}
